// VBConversions Note: VB project level imports
using System.Collections.Generic;
using System;
using System.Linq;
using System.Drawing;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Data;
using System.Xml.Linq;
using Microsoft.VisualBasic;
using System.Collections;
using System.Windows.Forms;
// End of VB project level imports

using WindowsApp1;

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsApp1
{
	
	
	
	///<summary>
	///Represents a strongly typed in-memory cache of data.
	///</summary>
	[global::System.Serializable(), 
	global::System.ComponentModel.DesignerCategoryAttribute("code"), 
	global::System.ComponentModel.ToolboxItem(true), 
	global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), 
	global::System.Xml.Serialization.XmlRootAttribute("changguanDataSet1"), 
	global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]public 
	partial class changguanDataSet1 : global::System.Data.DataSet
	{
		
		private UsersDataTable tableUsers;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public changguanDataSet1()
		{
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected changguanDataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
		{
			if (this.IsBinarySerialized(info, context) == true)
			{
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;
				return ;
			}
			string strSchema = System.Convert.ToString(info.GetValue("XmlSchema", typeof(string)));
			if (this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if (!ReferenceEquals((ds.Tables["Users"]), null))
				{
					base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
		global::System.ComponentModel.Browsable(false), 
		global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public UsersDataTable Users
		{
			get
			{
				return this.tableUsers;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
		global::System.ComponentModel.BrowsableAttribute(true), 
		global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
		global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
		global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public override global::System.Data.DataSet Clone()
		{
			changguanDataSet1 cln = (changguanDataSet1) (base.Clone());
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
		{
			if (this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if (!ReferenceEquals((ds.Tables["Users"]), null))
				{
					base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal void InitVars()
		{
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal void InitVars(bool initTable)
		{
			this.tableUsers = (UsersDataTable) (base.Tables["Users"]);
			if (initTable == true)
			{
				if (!ReferenceEquals((this.tableUsers), null))
				{
					this.tableUsers.InitVars();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void InitClass()
		{
			this.DataSetName = "changguanDataSet1";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/changguanDataSet1.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableUsers = new UsersDataTable();
			base.Tables.Add(this.tableUsers);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private bool ShouldSerializeUsers()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
		{
			if (e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)
			{
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
		global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			changguanDataSet1 ds = new changguanDataSet1();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace))
			{
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try
				{
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext())
					{
						schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if (s1.Length == s2.Length)
						{
							s1.Position = 0;
							s2.Position = 0;
							
							while ((s1.Position != s1.Length) 
								&& (s1.ReadByte() == s2.ReadByte()))
							{
								
								
							}
							if (s1.Position == s1.Length)
							{
								return type;
							}
						}
						
					}
				}
				finally
				{
					if (!ReferenceEquals((s1), null))
					{
						s1.Close();
					}
					if (!ReferenceEquals((s2), null))
					{
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.Serializable(), 
		global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public 
		partial class UsersDataTable : global::System.Data.TypedTableBase<UsersRow>
		{
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnUname;
			
			private global::System.Data.DataColumn columnUidentity;
			
			private global::System.Data.DataColumn columnUpassword;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersDataTable()
			{
				this.TableName = "Users";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal UsersDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected UsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public global::System.Data.DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public global::System.Data.DataColumn UnameColumn
			{
				get
				{
					return this.columnUname;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public global::System.Data.DataColumn UidentityColumn
			{
				get
				{
					return this.columnUidentity;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public global::System.Data.DataColumn UpasswordColumn
			{
				get
				{
					return this.columnUpassword;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRow this[int index]
			{
				get
				{
					return ((UsersRow) (this.Rows[index]));
				}
			}
			
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRowChangeEventHandler UsersRowChangingEvent;
			public event UsersRowChangeEventHandler UsersRowChanging;
			
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRowChangeEventHandler UsersRowChangedEvent;
			public event UsersRowChangeEventHandler UsersRowChanged;
			
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRowChangeEventHandler UsersRowDeletingEvent;
			public event UsersRowChangeEventHandler UsersRowDeleting;
			
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRowChangeEventHandler UsersRowDeletedEvent;
			public event UsersRowChangeEventHandler UsersRowDeleted;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public void AddUsersRow(UsersRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRow AddUsersRow(string ID, string Uname, string Uidentity, string Upassword)
			{
				UsersRow rowUsersRow = (UsersRow) (this.NewRow());
				object[] columnValuesArray = new object[] {ID, Uname, Uidentity, Upassword};
				rowUsersRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowUsersRow);
				return rowUsersRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRow FindByID(string ID)
			{
				return ((UsersRow) (this.Rows.Find(new object[] {ID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public override global::System.Data.DataTable Clone()
			{
				UsersDataTable cln = (UsersDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override global::System.Data.DataTable CreateInstance()
			{
				return new UsersDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal void InitVars()
			{
				this.columnID = base.Columns["ID"];
				this.columnUname = base.Columns["Uname"];
				this.columnUidentity = base.Columns["Uidentity"];
				this.columnUpassword = base.Columns["Upassword"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void InitClass()
			{
				this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnUname = new global::System.Data.DataColumn("Uname", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUname);
				this.columnUidentity = new global::System.Data.DataColumn("Uidentity", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUidentity);
				this.columnUpassword = new global::System.Data.DataColumn("Upassword", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUpassword);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnID}, true));
				this.columnID.AllowDBNull = false;
				this.columnID.Unique = true;
				this.columnID.MaxLength = 20;
				this.columnUname.AllowDBNull = false;
				this.columnUname.MaxLength = 10;
				this.columnUidentity.AllowDBNull = false;
				this.columnUidentity.MaxLength = 10;
				this.columnUpassword.AllowDBNull = false;
				this.columnUpassword.MaxLength = 20;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRow NewUsersRow()
			{
				return ((UsersRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new UsersRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override global::System.Type GetRowType()
			{
				return typeof(UsersRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (!ReferenceEquals((this.UsersRowChangedEvent), null))
				{
					UsersRowChangedEvent(this, new UsersRowChangeEvent((UsersRow) e.Row, e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (!ReferenceEquals((this.UsersRowChangingEvent), null))
				{
					UsersRowChangingEvent(this, new UsersRowChangeEvent((UsersRow) e.Row, e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (!ReferenceEquals((this.UsersRowDeletedEvent), null))
				{
					UsersRowDeletedEvent(this, new UsersRowChangeEvent((UsersRow) e.Row, e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (!ReferenceEquals((this.UsersRowDeletingEvent), null))
				{
					UsersRowDeletingEvent(this, new UsersRowChangeEvent((UsersRow) e.Row, e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public void RemoveUsersRow(UsersRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				changguanDataSet1 ds = new changguanDataSet1();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "UsersDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) 
									&& (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (!ReferenceEquals((s1), null))
						{
							s1.Close();
						}
						if (!ReferenceEquals((s2), null))
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		public partial class UsersRow : global::System.Data.DataRow
		{
			
			private UsersDataTable tableUsers;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal UsersRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableUsers = (UsersDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public string ID
			{
				get
				{
					return System.Convert.ToString(this[this.tableUsers.IDColumn]);
				}
				set
				{
					this[this.tableUsers.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public string Uname
			{
				get
				{
					return System.Convert.ToString(this[this.tableUsers.UnameColumn]);
				}
				set
				{
					this[this.tableUsers.UnameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public string Uidentity
			{
				get
				{
					return System.Convert.ToString(this[this.tableUsers.UidentityColumn]);
				}
				set
				{
					this[this.tableUsers.UidentityColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public string Upassword
			{
				get
				{
					return System.Convert.ToString(this[this.tableUsers.UpasswordColumn]);
				}
				set
				{
					this[this.tableUsers.UpasswordColumn] = value;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public class UsersRowChangeEvent : global::System.EventArgs
		{
			
			private UsersRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRowChangeEvent(UsersRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
	
	namespace changguanDataSet1TableAdapters
	{
		
		///<summary>
		///Represents the connection and commands used to retrieve and save data.
		///</summary>
		[global::System.ComponentModel.DesignerCategoryAttribute("code"), 
		global::System.ComponentModel.ToolboxItem(true), 
		global::System.ComponentModel.DataObjectAttribute(true), 
		global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + 
		", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
		global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public 
		partial class UsersTableAdapter : global::System.ComponentModel.Component
		{
			
			private global::System.Data.SqlClient.SqlDataAdapter _adapter;
			
			private global::System.Data.SqlClient.SqlConnection _connection;
			
			private global::System.Data.SqlClient.SqlTransaction _transaction;
			
			private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
			
			private bool _clearBeforeFill;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UsersTableAdapter()
			{
				this.ClearBeforeFill = true;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter
			{
				get
				{
					if (ReferenceEquals(this._adapter, null))
					{
						this.InitAdapter();
					}
					return this._adapter;
				}
				set { Adapter = value; }
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal global::System.Data.SqlClient.SqlConnection Connection
			{
				get
				{
					if (ReferenceEquals(this._connection, null))
					{
						this.InitConnection();
					}
					return this._connection;
				}
				set
				{
					this._connection = value;
					if (!ReferenceEquals((this.Adapter.InsertCommand), null))
					{
						this.Adapter.InsertCommand.Connection = value;
					}
					if (!ReferenceEquals((this.Adapter.DeleteCommand), null))
					{
						this.Adapter.DeleteCommand.Connection = value;
					}
					if (!ReferenceEquals((this.Adapter.UpdateCommand), null))
					{
						this.Adapter.UpdateCommand.Connection = value;
					}
					int i = 0;
					while (i < this.CommandCollection.Length)
					{
						if (!ReferenceEquals((this.CommandCollection[i]), null))
						{
							this.CommandCollection[i].Connection = value;
						}
						i = i + 1;
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal global::System.Data.SqlClient.SqlTransaction Transaction
			{
				get
				{
					return this._transaction;
				}
				set
				{
					this._transaction = value;
					int i = 0;
					while (i < this.CommandCollection.Length)
					{
						this.CommandCollection[i].Transaction = this._transaction;
						i = i + 1;
					}
					if ((!ReferenceEquals((this.Adapter), null)) 
						&& (!ReferenceEquals((this.Adapter.DeleteCommand), null)))
					{
						this.Adapter.DeleteCommand.Transaction = this._transaction;
					}
					if ((!ReferenceEquals((this.Adapter), null)) 
						&& (!ReferenceEquals((this.Adapter.InsertCommand), null)))
					{
						this.Adapter.InsertCommand.Transaction = this._transaction;
					}
					if ((!ReferenceEquals((this.Adapter), null)) 
						&& (!ReferenceEquals((this.Adapter.UpdateCommand), null)))
					{
						this.Adapter.UpdateCommand.Transaction = this._transaction;
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
			{
				get
				{
					if (ReferenceEquals(this._commandCollection, null))
					{
						this.InitCommandCollection();
					}
					return this._commandCollection;
				}
				set { CommandCollection = value; }
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public bool ClearBeforeFill
			{
				get
				{
					return this._clearBeforeFill;
				}
				set
				{
					this._clearBeforeFill = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void InitAdapter()
			{
				this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
				global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
				tableMapping.SourceTable = "Table";
				tableMapping.DataSetTable = "Users";
				tableMapping.ColumnMappings.Add("ID", "ID");
				tableMapping.ColumnMappings.Add("Uname", "Uname");
				tableMapping.ColumnMappings.Add("Uidentity", "Uidentity");
				tableMapping.ColumnMappings.Add("Upassword", "Upassword");
				this._adapter.TableMappings.Add(tableMapping);
				this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.DeleteCommand.Connection = this.Connection;
				this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([ID] = @Original_ID) AND ([Uname] = @Original_U" + 
					"name) AND ([Uidentity] = @Original_Uidentity) AND ([Upassword] = @Original_Upass" + 
					"word))";
				this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Uname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uname", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Uidentity", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uidentity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Upassword", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Upassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.InsertCommand.Connection = this.Connection;
				this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([ID], [Uname], [Uidentity], [Upassword]) VALUES (@ID, " + 
					"@Uname, @Uidentity, @Upassword);" + System.Convert.ToString(global::Microsoft.VisualBasic.Strings.ChrW(13)) + System.Convert.ToString(global::Microsoft.VisualBasic.Strings.ChrW(10)) + "SELECT ID, Uname, Uidentity, Upassword FROM Us" + 
					"ers WHERE (ID = @ID)";
				this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uidentity", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uidentity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Upassword", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Upassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.UpdateCommand.Connection = this.Connection;
				this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users] SET [ID] = @ID, [Uname] = @Uname, [Uidentity] = @Uidentity, " + 
					"[Upassword] = @Upassword WHERE (([ID] = @Original_ID) AND ([Uname] = @Original_U" + 
					"name) AND ([Uidentity] = @Original_Uidentity) AND ([Upassword] = @Original_Upass" + 
					"word));" + System.Convert.ToString(global::Microsoft.VisualBasic.Strings.ChrW(13)) + System.Convert.ToString(global::Microsoft.VisualBasic.Strings.ChrW(10)) + "SELECT ID, Uname, Uidentity, Upassword FROM Users WHERE (ID = @ID)";
				this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Uidentity", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uidentity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Upassword", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Upassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Uname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uname", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Uidentity", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Uidentity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Upassword", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, (byte) 0, (byte) 0, "Upassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void InitConnection()
			{
				this._connection = new global::System.Data.SqlClient.SqlConnection();
				this._connection.ConnectionString = global::WindowsApp1.My.Settings.Default.changguanConnectionString;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private void InitCommandCollection()
			{
				this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
				this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
				this._commandCollection[0].Connection = this.Connection;
				this._commandCollection[0].CommandText = "SELECT ID, Uname, Uidentity, Upassword FROM dbo.Users";
				this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int Fill(changguanDataSet1.UsersDataTable dataTable)
			{
				this.Adapter.SelectCommand = this.CommandCollection[0];
				if (this.ClearBeforeFill == true)
				{
					dataTable.Clear();
				}
				int returnValue = this.Adapter.Fill(dataTable);
				return returnValue;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual changguanDataSet1.UsersDataTable GetData()
			{
				this.Adapter.SelectCommand = this.CommandCollection[0];
				changguanDataSet1.UsersDataTable dataTable = new changguanDataSet1.UsersDataTable();
				this.Adapter.Fill(dataTable);
				return dataTable;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(changguanDataSet1.UsersDataTable dataTable)
			{
				return this.Adapter.Update(dataTable);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(changguanDataSet1 dataSet)
			{
				return this.Adapter.Update(dataSet, "Users");
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
			{
				return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
			{
				return this.Adapter.Update(dataRows);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(string Original_ID, string Original_Uname, string Original_Uidentity, string Original_Upassword)
			{
				if (ReferenceEquals(Original_ID, null))
				{
					throw (new global::System.ArgumentNullException("Original_ID"));
				}
				else
				{
					this.Adapter.DeleteCommand.Parameters[0].Value = System.Convert.ToString(Original_ID);
				}
				if (ReferenceEquals(Original_Uname, null))
				{
					throw (new global::System.ArgumentNullException("Original_Uname"));
				}
				else
				{
					this.Adapter.DeleteCommand.Parameters[1].Value = System.Convert.ToString(Original_Uname);
				}
				if (ReferenceEquals(Original_Uidentity, null))
				{
					throw (new global::System.ArgumentNullException("Original_Uidentity"));
				}
				else
				{
					this.Adapter.DeleteCommand.Parameters[2].Value = System.Convert.ToString(Original_Uidentity);
				}
				if (ReferenceEquals(Original_Upassword, null))
				{
					throw (new global::System.ArgumentNullException("Original_Upassword"));
				}
				else
				{
					this.Adapter.DeleteCommand.Parameters[3].Value = System.Convert.ToString(Original_Upassword);
				}
				global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
				if (((int) (this.Adapter.DeleteCommand.Connection.State) & (int) global::System.Data.ConnectionState.Open) 
					!= (int) global::System.Data.ConnectionState.Open)
				{
					this.Adapter.DeleteCommand.Connection.Open();
				}
				try
				{
					int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
					return returnValue;
				}
				finally
				{
					if (previousConnectionState == global::System.Data.ConnectionState.Closed)
					{
						this.Adapter.DeleteCommand.Connection.Close();
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string ID, string Uname, string Uidentity, string Upassword)
			{
				if (ReferenceEquals(ID, null))
				{
					throw (new global::System.ArgumentNullException("ID"));
				}
				else
				{
					this.Adapter.InsertCommand.Parameters[0].Value = System.Convert.ToString(ID);
				}
				if (ReferenceEquals(Uname, null))
				{
					throw (new global::System.ArgumentNullException("Uname"));
				}
				else
				{
					this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Uname);
				}
				if (ReferenceEquals(Uidentity, null))
				{
					throw (new global::System.ArgumentNullException("Uidentity"));
				}
				else
				{
					this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(Uidentity);
				}
				if (ReferenceEquals(Upassword, null))
				{
					throw (new global::System.ArgumentNullException("Upassword"));
				}
				else
				{
					this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToString(Upassword);
				}
				global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
				if (((int) (this.Adapter.InsertCommand.Connection.State) & (int) global::System.Data.ConnectionState.Open) 
					!= (int) global::System.Data.ConnectionState.Open)
				{
					this.Adapter.InsertCommand.Connection.Open();
				}
				try
				{
					int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
					return returnValue;
				}
				finally
				{
					if (previousConnectionState == global::System.Data.ConnectionState.Closed)
					{
						this.Adapter.InsertCommand.Connection.Close();
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string ID, string Uname, string Uidentity, string Upassword, string Original_ID, string Original_Uname, string Original_Uidentity, string Original_Upassword)
			{
				if (ReferenceEquals(ID, null))
				{
					throw (new global::System.ArgumentNullException("ID"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[0].Value = System.Convert.ToString(ID);
				}
				if (ReferenceEquals(Uname, null))
				{
					throw (new global::System.ArgumentNullException("Uname"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[1].Value = System.Convert.ToString(Uname);
				}
				if (ReferenceEquals(Uidentity, null))
				{
					throw (new global::System.ArgumentNullException("Uidentity"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(Uidentity);
				}
				if (ReferenceEquals(Upassword, null))
				{
					throw (new global::System.ArgumentNullException("Upassword"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(Upassword);
				}
				if (ReferenceEquals(Original_ID, null))
				{
					throw (new global::System.ArgumentNullException("Original_ID"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToString(Original_ID);
				}
				if (ReferenceEquals(Original_Uname, null))
				{
					throw (new global::System.ArgumentNullException("Original_Uname"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToString(Original_Uname);
				}
				if (ReferenceEquals(Original_Uidentity, null))
				{
					throw (new global::System.ArgumentNullException("Original_Uidentity"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[6].Value = System.Convert.ToString(Original_Uidentity);
				}
				if (ReferenceEquals(Original_Upassword, null))
				{
					throw (new global::System.ArgumentNullException("Original_Upassword"));
				}
				else
				{
					this.Adapter.UpdateCommand.Parameters[7].Value = System.Convert.ToString(Original_Upassword);
				}
				global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
				if (((int) (this.Adapter.UpdateCommand.Connection.State) & (int) global::System.Data.ConnectionState.Open) 
					!= (int) global::System.Data.ConnectionState.Open)
				{
					this.Adapter.UpdateCommand.Connection.Open();
				}
				try
				{
					int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
					return returnValue;
				}
				finally
				{
					if (previousConnectionState == global::System.Data.ConnectionState.Closed)
					{
						this.Adapter.UpdateCommand.Connection.Close();
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), 
			global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string Uname, string Uidentity, string Upassword, string Original_ID, string Original_Uname, string Original_Uidentity, string Original_Upassword)
			{
				return this.Update(Original_ID, Uname, Uidentity, Upassword, Original_ID, Original_Uname, Original_Uidentity, Original_Upassword);
			}
		}
		
		///<summary>
		///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
		///</summary>
		[global::System.ComponentModel.DesignerCategoryAttribute("code"), 
		global::System.ComponentModel.ToolboxItem(true), 
		global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + 
		"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
		global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]public 
		partial class TableAdapterManager : global::System.ComponentModel.Component
		{
			
			private UpdateOrderOption _updateOrder;
			
			private UsersTableAdapter _usersTableAdapter;
			
			private bool _backupDataSetBeforeUpdate;
			
			private global::System.Data.IDbConnection _connection;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public UpdateOrderOption UpdateOrder
			{
				get
				{
					return this._updateOrder;
				}
				set
				{
					this._updateOrder = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + 
			"ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + 
			"a", "System.Drawing.Design.UITypeEditor")]public UsersTableAdapter UsersTableAdapter
			{
				get
				{
					return this._usersTableAdapter;
				}
				set
				{
					this._usersTableAdapter = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public bool BackupDataSetBeforeUpdate
			{
				get
				{
					return this._backupDataSetBeforeUpdate;
				}
				set
				{
					this._backupDataSetBeforeUpdate = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Browsable(false)]public global::System.Data.IDbConnection Connection
			{
				get
				{
					if (!ReferenceEquals((this._connection), null))
					{
						return this._connection;
					}
					if ((!ReferenceEquals((this._usersTableAdapter), null)) 
						&& (!ReferenceEquals((this._usersTableAdapter.Connection), null)))
					{
						return this._usersTableAdapter.Connection;
					}
					return null;
				}
				set
				{
					this._connection = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"), 
			global::System.ComponentModel.Browsable(false)]public int TableAdapterInstanceCount
			{
				get
				{
					int count = 0;
					if (!ReferenceEquals((this._usersTableAdapter), null))
					{
						count = count + 1;
					}
					return count;
				}
			}
			
			///<summary>
			///Update rows in top-down order.
			///</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private int UpdateUpdatedRows(changguanDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
			{
				int result = 0;
				if (!ReferenceEquals((this._usersTableAdapter), null))
				{
					global::System.Data.DataRow[] updatedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
					updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
					if ((!ReferenceEquals((updatedRows), null)) 
						&& (0 < updatedRows.Length))
					{
						result = result + this._usersTableAdapter.Update(updatedRows);
						allChangedRows.AddRange(updatedRows);
					}
				}
				return result;
			}
			
			///<summary>
			///Insert rows in top-down order.
			///</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private int UpdateInsertedRows(changguanDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
			{
				int result = 0;
				if (!ReferenceEquals((this._usersTableAdapter), null))
				{
					global::System.Data.DataRow[] addedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.Added);
					if ((!ReferenceEquals((addedRows), null)) 
						&& (0 < addedRows.Length))
					{
						result = result + this._usersTableAdapter.Update(addedRows);
						allAddedRows.AddRange(addedRows);
					}
				}
				return result;
			}
			
			///<summary>
			///Delete rows in bottom-up order.
			///</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private int UpdateDeletedRows(changguanDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows)
			{
				int result = 0;
				if (!ReferenceEquals((this._usersTableAdapter), null))
				{
					global::System.Data.DataRow[] deletedRows = dataSet.Users.Select(null, null, global::System.Data.DataViewRowState.Deleted);
					if ((!ReferenceEquals((deletedRows), null)) 
						&& (0 < deletedRows.Length))
					{
						result = result + this._usersTableAdapter.Update(deletedRows);
						allChangedRows.AddRange(deletedRows);
					}
				}
				return result;
			}
			
			///<summary>
			///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
			///</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
			{
				if ((ReferenceEquals(updatedRows, null)) 
					|| (updatedRows.Length < 1))
				{
					return updatedRows;
				}
				if ((ReferenceEquals(allAddedRows, null)) 
					|| (allAddedRows.Count < 1))
				{
					return updatedRows;
				}
				global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
				int i = 0;
				while (i < updatedRows.Length)
				{
					global::System.Data.DataRow row = updatedRows[i];
					if (allAddedRows.Contains(row) == false)
					{
						realUpdatedRows.Add(row);
					}
					i = i + 1;
				}
				return realUpdatedRows.ToArray();
			}
			
			///<summary>
			///Update all changes to the dataset.
			///</summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public virtual int UpdateAll(changguanDataSet1 dataSet)
			{
				if (ReferenceEquals(dataSet, null))
				{
					throw (new global::System.ArgumentNullException("dataSet"));
				}
				if (dataSet.HasChanges() == false)
				{
					return 0;
				}
				if ((!ReferenceEquals((this._usersTableAdapter), null)) 
					&& (this.MatchTableAdapterConnection(this._usersTableAdapter.Connection) == false))
				{
					throw (new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。"));
				}
				global::System.Data.IDbConnection workConnection = this.Connection;
				if (ReferenceEquals(workConnection, null))
				{
					throw (new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" + 
						"eAdapter 实例。"));
				}
				bool workConnOpened = false;
				if (((int) (workConnection.State) & (int) global::System.Data.ConnectionState.Broken) 
					== (int) global::System.Data.ConnectionState.Broken)
				{
					workConnection.Close();
				}
				if (workConnection.State == global::System.Data.ConnectionState.Closed)
				{
					workConnection.Open();
					workConnOpened = true;
				}
				global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
				if (ReferenceEquals(workTransaction, null))
				{
					throw (new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。"));
				}
				global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
				global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
				global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
				global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
				int result = 0;
				global::System.Data.DataSet backupDataSet = null;
				if (this.BackupDataSetBeforeUpdate)
				{
					backupDataSet = new global::System.Data.DataSet();
					backupDataSet.Merge(dataSet);
				}
				try
				{
					//---- Prepare for update -----------
					//
					if (!ReferenceEquals((this._usersTableAdapter), null))
					{
						revertConnections.Add(this._usersTableAdapter, this._usersTableAdapter.Connection);
						this._usersTableAdapter.Connection = (global::System.Data.SqlClient.SqlConnection) workConnection;
						this._usersTableAdapter.Transaction = (global::System.Data.SqlClient.SqlTransaction) workTransaction;
						if (this._usersTableAdapter.Adapter.AcceptChangesDuringUpdate)
						{
							this._usersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
							adaptersWithAcceptChangesDuringUpdate.Add(this._usersTableAdapter.Adapter);
						}
					}
					//
					//---- Perform updates -----------
					//
					if (this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
					{
						result = result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
						result = result + this.UpdateInsertedRows(dataSet, allAddedRows);
					}
					else
					{
						result = result + this.UpdateInsertedRows(dataSet, allAddedRows);
						result = result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
					}
					result = result + this.UpdateDeletedRows(dataSet, allChangedRows);
					//
					//---- Commit updates -----------
					//
					workTransaction.Commit();
					if (0 < allAddedRows.Count)
					{
						global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allAddedRows.Count)];
						allAddedRows.CopyTo(rows);
						int i = 0;
						while (i < rows.Length)
						{
							global::System.Data.DataRow row = rows[i];
							row.AcceptChanges();
							i = i + 1;
						}
					}
					if (0 < allChangedRows.Count)
					{
						global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allChangedRows.Count)];
						allChangedRows.CopyTo(rows);
						int i = 0;
						while (i < rows.Length)
						{
							global::System.Data.DataRow row = rows[i];
							row.AcceptChanges();
							i = i + 1;
						}
					}
				}
				catch (global::System.Exception ex)
				{
					workTransaction.Rollback();
					//---- Restore the dataset -----------
					if (this.BackupDataSetBeforeUpdate)
					{
						global::System.Diagnostics.Debug.Assert(!ReferenceEquals((backupDataSet), null));
						dataSet.Clear();
						dataSet.Merge(backupDataSet);
					}
					else
					{
						if (0 < allAddedRows.Count)
						{
							global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allAddedRows.Count)];
							allAddedRows.CopyTo(rows);
							int i = 0;
							while (i < rows.Length)
							{
								global::System.Data.DataRow row = rows[i];
								row.AcceptChanges();
								row.SetAdded();
								i = i + 1;
							}
						}
					}
					throw (ex);
				}
				finally
				{
					if (workConnOpened)
					{
						workConnection.Close();
					}
					if (!ReferenceEquals((this._usersTableAdapter), null))
					{
						this._usersTableAdapter.Connection = (global::System.Data.SqlClient.SqlConnection) (revertConnections[this._usersTableAdapter]);
						this._usersTableAdapter.Transaction = null;
					}
					if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
					{
						global::System.Data.Common.DataAdapter[] adapters = new global::System.Data.Common.DataAdapter[(adaptersWithAcceptChangesDuringUpdate.Count)];
						adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
						int i = 0;
						while (i < adapters.Length)
						{
							global::System.Data.Common.DataAdapter adapter = adapters[i];
							adapter.AcceptChangesDuringUpdate = true;
							i = i + 1;
						}
					}
				}
				return result;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst)
			{
				global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
			global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection)
			{
				if (!ReferenceEquals((this._connection), null))
				{
					return true;
				}
				if ((ReferenceEquals(this.Connection, null)) 
					|| (ReferenceEquals(inputConnection, null)))
				{
					return true;
				}
				if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal))
				{
					return true;
				}
				return false;
			}
			
			///<summary>
			///Update Order Option
			///</summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public enum UpdateOrderOption
			{
				
				InsertUpdateDelete = 0,
				
				UpdateInsertDelete = 1
			}
			
			///<summary>
			///Used to sort self-referenced table's rows
			///</summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow>
			{
				
				private global::System.Data.DataRelation _relation;
				
				private int _childFirst;
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
				global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst)
				{
					this._relation = relation;
					if (childFirst)
					{
						this._childFirst = -1;
					}
					else
					{
						this._childFirst = 1;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
				global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, ref int distance)
				{
					global::System.Diagnostics.Debug.Assert(!ReferenceEquals((row), null));
					global::System.Data.DataRow root = row;
					distance = 0;
					
					global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
					traversedRows[row] = row;
					
					global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
					
					while ((!ReferenceEquals((parent), null)) 
						&& (traversedRows.ContainsKey(parent) == false))
					{
						distance = distance + 1;
						root = parent;
						traversedRows[parent] = parent;
						parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
						
					}
					
					if (distance == 0)
					{
						traversedRows.Clear();
						traversedRows[row] = row;
						parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
						
						while ((!ReferenceEquals((parent), null)) 
							&& (traversedRows.ContainsKey(parent) == false))
						{
							distance = distance + 1;
							root = parent;
							traversedRows[parent] = parent;
							parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
							
						}
					}
					
					return root;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), 
				global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2)
				{
					if (object.ReferenceEquals(row1, row2))
					{
						return 0;
					}
					if (ReferenceEquals(row1, null))
					{
						return -1;
					}
					if (ReferenceEquals(row2, null))
					{
						return 1;
					}
					
					int distance1 = 0;
					global::System.Data.DataRow root1 = this.GetRoot(row1, ref distance1);
					
					int distance2 = 0;
					global::System.Data.DataRow root2 = this.GetRoot(row2, ref distance2);
					
					if (object.ReferenceEquals(root1, root2))
					{
						return (this._childFirst * distance1.CompareTo(distance2));
					}
					else
					{
						global::System.Diagnostics.Debug.Assert((!ReferenceEquals((root1.Table), null)) 
							&& (!ReferenceEquals((root2.Table), null)));
						if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
						{
							return -1;
						}
						else
						{
							return 1;
						}
					}
				}
			}
		}
	}
	
}
